// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testdata.proto

package proto

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TestData struct {
	Hash    []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ShardID uint32   `protobuf:"varint,2,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	Nonce   uint64   `protobuf:"varint,3,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Hashes  [][]byte `protobuf:"bytes,4,rep,name=Hashes,proto3" json:"Hashes,omitempty"`
	Message string   `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *TestData) Reset()      { *m = TestData{} }
func (*TestData) ProtoMessage() {}
func (*TestData) Descriptor() ([]byte, []int) {
	return fileDescriptor_40c4782d007dfce9, []int{0}
}
func (m *TestData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestData.Merge(m, src)
}
func (m *TestData) XXX_Size() int {
	return m.Size()
}
func (m *TestData) XXX_DiscardUnknown() {
	xxx_messageInfo_TestData.DiscardUnknown(m)
}

var xxx_messageInfo_TestData proto.InternalMessageInfo

func (m *TestData) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *TestData) GetShardID() uint32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *TestData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TestData) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *TestData) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*TestData)(nil), "proto.TestData")
}

func init() { proto.RegisterFile("testdata.proto", fileDescriptor_40c4782d007dfce9) }

var fileDescriptor_40c4782d007dfce9 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0xcf, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x06, 0x60, 0x3f, 0x9a, 0x14, 0xb0, 0x0a, 0x83, 0x85, 0x90, 0xc5, 0xf0, 0x64, 0x31, 0x79,
	0xa1, 0x1d, 0x38, 0x00, 0x12, 0xea, 0x00, 0x03, 0x0c, 0x86, 0x89, 0xcd, 0x69, 0x4d, 0xc2, 0x00,
	0x46, 0xb5, 0xbb, 0xf7, 0x08, 0x1c, 0x83, 0xa3, 0x30, 0x66, 0xcc, 0x48, 0x5e, 0x16, 0xc6, 0x1e,
	0x01, 0xd5, 0x69, 0xa6, 0xff, 0xff, 0x2c, 0xfd, 0x96, 0x1e, 0x3f, 0x8d, 0x2e, 0xc4, 0xa5, 0x8d,
	0x76, 0xfa, 0xb9, 0xf2, 0xd1, 0x8b, 0x3c, 0xc5, 0xc5, 0x55, 0xf9, 0x16, 0xab, 0x75, 0x31, 0x5d,
	0xf8, 0xf7, 0x59, 0xe9, 0x4b, 0x3f, 0x4b, 0xcf, 0xc5, 0xfa, 0x35, 0x29, 0x21, 0xb5, 0x7e, 0x75,
	0xb9, 0x01, 0x7e, 0xf4, 0xec, 0x42, 0x9c, 0xdb, 0x68, 0x85, 0xe0, 0xd9, 0x9d, 0x0d, 0x95, 0x04,
	0x05, 0x7a, 0x62, 0x52, 0x17, 0x92, 0x1f, 0x3e, 0x55, 0x76, 0xb5, 0xbc, 0x9f, 0xcb, 0x03, 0x05,
	0xfa, 0xc4, 0x0c, 0x14, 0x67, 0x3c, 0x7f, 0xf4, 0x1f, 0x0b, 0x27, 0x47, 0x0a, 0x74, 0x66, 0x7a,
	0x88, 0x73, 0x3e, 0xde, 0xed, 0x5c, 0x90, 0x99, 0x1a, 0xe9, 0x89, 0xd9, 0x6b, 0xf7, 0xcf, 0x83,
	0x0b, 0xc1, 0x96, 0x4e, 0xe6, 0x0a, 0xf4, 0xb1, 0x19, 0x78, 0x7b, 0x53, 0xb7, 0xc8, 0x9a, 0x16,
	0xd9, 0xb6, 0x45, 0xd8, 0x10, 0xc2, 0x37, 0x21, 0xfc, 0x10, 0x42, 0x4d, 0x08, 0x0d, 0x21, 0xfc,
	0x12, 0xc2, 0x1f, 0x21, 0xdb, 0x12, 0xc2, 0x57, 0x87, 0xac, 0xee, 0x90, 0x35, 0x1d, 0xb2, 0x97,
	0xfe, 0xe4, 0x62, 0x9c, 0xe2, 0xfa, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x87, 0x2c, 0xf9, 0xa6, 0x12,
	0x01, 0x00, 0x00,
}

func (this *TestData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestData)
	if !ok {
		that2, ok := that.(TestData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	if this.ShardID != that1.ShardID {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if len(this.Hashes) != len(that1.Hashes) {
		return false
	}
	for i := range this.Hashes {
		if !bytes.Equal(this.Hashes[i], that1.Hashes[i]) {
			return false
		}
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *TestData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.TestData{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "ShardID: "+fmt.Sprintf("%#v", this.ShardID)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Hashes: "+fmt.Sprintf("%#v", this.Hashes)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTestdata(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTestdata(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hashes) > 0 {
		for iNdEx := len(m.Hashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hashes[iNdEx])
			copy(dAtA[i:], m.Hashes[iNdEx])
			i = encodeVarintTestdata(dAtA, i, uint64(len(m.Hashes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Nonce != 0 {
		i = encodeVarintTestdata(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if m.ShardID != 0 {
		i = encodeVarintTestdata(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTestdata(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTestdata(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestdata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTestdata(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovTestdata(uint64(m.ShardID))
	}
	if m.Nonce != 0 {
		n += 1 + sovTestdata(uint64(m.Nonce))
	}
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			l = len(b)
			n += 1 + l + sovTestdata(uint64(l))
		}
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTestdata(uint64(l))
	}
	return n
}

func sovTestdata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTestdata(x uint64) (n int) {
	return sovTestdata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TestData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TestData{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`ShardID:` + fmt.Sprintf("%v", this.ShardID) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Hashes:` + fmt.Sprintf("%v", this.Hashes) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTestdata(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTestdata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTestdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTestdata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTestdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestdata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestdata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestdata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestdata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestdata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestdata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestdata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestdata = fmt.Errorf("proto: unexpected end of group")
)
